#!/usr/bin/env python
#-*- coding:utf-8 -*-

from __future__ import absolute_import

import os.path
import yaml
import textwrap
import requests
import logging
import subprocess

from .util import DEPLOYMENT

def setup(config):
    ### repo_definitions.yml
    logging.debug("Creating the repo_definitions.yml file...")
    definitions_path = os.path.join(DEPLOYMENT, 'repo_definitions.yml')
    with open(definitions_path, 'w') as f:
        print >> f, "# WARNING: autogenerated file\n"
        yaml.dump(config['repositories'], f)

    ### inventory.ini
    logging.debug("Creating the inventory.ini file...")
    inventory = textwrap.dedent("""
    [local]
    localhost ansible_connection=local

    [sync-nodes]
    {config[nodes][sync][host]} ansible_ssh_user={config[nodes][sync][user]}

    [bridge-nodes]
    {config[nodes][bridge]}

    [monitor-nodes]
    {config[nodes][monitor]}

    [raspberrypi]
    {config[addresses][rpi]}
    """).strip().format(config=config)
    inventory_path = os.path.join(DEPLOYMENT, 'inventory.ini')
    with open(inventory_path, 'w') as f:
        print >> f, "# WARNING: autogenerated file\n"
        print >> f, inventory

    ### ec2.ini
    logging.debug("Creating the ec2.ini file...")
    ec2 = textwrap.dedent("""
    [ec2]
    regions = {config[AWS][region]}
    regions_exclude = us-gov-west-1,cn-north-1
    destination_variable = public_dns_name
    vpc_destination_variable = ip_address
    route53 = False
    all_instances = False
    all_rds_instances = False
    cache_path = ~/.ansible/tmp
    cache_max_age = 300
    nested_groups = False
    """).strip().format(config=config)
    ec2_ini_path = os.path.join(DEPLOYMENT, 'ec2.ini')
    with open(ec2_ini_path, 'w') as f:
        print >> f, "# WARNING: autogenerated file\n"
        print >> f, ec2

    ### ec2.py
    ec2_py_path = os.path.join(DEPLOYMENT, 'ec2.py')
    if not os.path.exists(ec2_py_path):
        logging.debug("Downloading the ec2.py file...")
        r = requests.get("https://raw.githubusercontent.com/ansible/ansible/1dc11c97525e1a387b1eacb50a1ad45fe6297d7b/plugins/inventory/ec2.py")
        with open(ec2_py_path, 'w') as f:
            f.write(r.text)
        os.chmod(ec2_py_path, 0755)
    else:
        logging.debug("ec2.py present, skipping")

    ### virtualenv
    if not os.path.exists(config["paths"]["virtualenv"]):
        logging.debug("Creating the virtualenv...")
        subprocess.check_call(
            ["virtualenv", "-p", "python2.7", config["paths"]["virtualenv"]])
        pip_path = os.path.join(config["paths"]["virtualenv"], "bin", "pip")
        subprocess.check_call(
            [pip_path, "install", "ansible==1.5.3", "boto==2.32.1"])
    else:
        logging.debug("virtualenv exists, skipping")
